(use-modules (grand scheme))
;;; a super-duper prototype thing. no thinking, no style, no naming, yaay!

(define prg1
'(;((0) (GOTO (0 0)))
 ((0 0) (IF (CONS? *VIEW*) (0 1) ELSE (1 0)))
 ((0 1) (IF (EQ? (CAR *VIEW*) 'fold-r) (0 2) ELSE (1 0)))
 ((0 2) (IF (CONS? (CDR *VIEW*)) (0 3) ELSE (1 0)))
 ((0 3) (IF (CONS? (CDR (CDR *VIEW*))) (0 4) ELSE (1 0)))
 ((0 4) (IF (CONS? (CDR (CDR (CDR *VIEW*)))) (0 5) ELSE (1 0)))
 ((0 5) (IF (NIL? (CAR (CDR (CDR (CDR *VIEW*))))) (0 6) ELSE (1 0)))
 ((0 6) (IF (NIL? (CDR (CDR (CDR (CDR *VIEW*))))) (0 7) ELSE (1 0)))
 ((0 7)
  (LET e (CAR (CDR (CDR *VIEW*))))
  (LET op (CAR (CDR *VIEW*)))
  (RETURN e))
 ((1 0) (IF (CONS? *VIEW*) (1 1) ELSE (2 0)))
 ((1 1) (IF (EQ? (CAR *VIEW*) 'fold-r) (1 2) ELSE (2 0)))
 ((1 2) (IF (CONS? (CDR *VIEW*)) (1 3) ELSE (2 0)))
 ((1 3) (IF (CONS? (CDR (CDR *VIEW*))) (1 4) ELSE (2 0)))
 ((1 4) (IF (CONS? (CDR (CDR (CDR *VIEW*)))) (1 5) ELSE (2 0)))
 ((1 5) (IF (CONS? (CAR (CDR (CDR (CDR *VIEW*))))) (1 6) ELSE (2 0)))
 ((1 6) (IF (NIL? (CDR (CDR (CDR (CDR *VIEW*))))) (1 7) ELSE (2 0)))
 ((1 7)
  (LET xs (CDR (CAR (CDR (CDR (CDR *VIEW*))))))
  (LET x (CAR (CAR (CDR (CDR (CDR *VIEW*))))))
  (LET e (CAR (CDR (CDR *VIEW*))))
  (LET op (CAR (CDR *VIEW*)))
  (LET *VIEW* (CONS 'fold-r (CONS op (CONS e (CONS xs ())))))
  (LET (V 0) (CALL (0 0) *VIEW*))
  (LET *VIEW* (CONS op (CONS x (CONS (V 0) ()))))
  (GOTO (0 0)))
 ((2 0) (IF (CONS? *VIEW*) (2 1) ELSE (3 0)))
 ((2 1) (IF (EQ? (CAR *VIEW*) 'cons) (2 2) ELSE (3 0)))
 ((2 2) (IF (CONS? (CDR *VIEW*)) (2 3) ELSE (3 0)))
 ((2 3) (IF (CONS? (CDR (CDR *VIEW*))) (2 4) ELSE (3 0)))
 ((2 4) (IF (NIL? (CDR (CDR (CDR *VIEW*)))) (2 5) ELSE (3 0)))
 ((2 5)
  (LET t (CAR (CDR (CDR *VIEW*))))
  (LET h (CAR (CDR *VIEW*)))
  (RETURN (CONS h t)))
 ((3 0) (IF (CONS? *VIEW*) (3 1) ELSE (4 0)))
 ((3 1) (IF (EQ? (CAR *VIEW*) 'apd) (3 2) ELSE (4 0)))
 ((3 2) (IF (CONS? (CDR *VIEW*)) (3 3) ELSE (4 0)))
 ((3 3) (IF (CONS? (CDR (CDR *VIEW*))) (3 4) ELSE (4 0)))
 ((3 4) (IF (NIL? (CDR (CDR (CDR *VIEW*)))) (3 5) ELSE (4 0)))
 ((3 5)
  (LET ys (CAR (CDR (CDR *VIEW*))))
  (LET xs (CAR (CDR *VIEW*)))
  (LET *VIEW* (CONS 'fold-r (CONS 'cons (CONS ys (CONS xs ())))))
  (GOTO (0 0)))
 ((4 0) (IF (CONS? *VIEW*) (4 1) ELSE (5 0)))
 ((4 1) (IF (CONS? (CAR *VIEW*)) (4 2) ELSE (5 0)))
 ((4 2) (IF (EQ? (CAR (CAR *VIEW*)) 'cons*f.hd) (4 3) ELSE (5 0)))
 ((4 3) (IF (CONS? (CDR (CAR *VIEW*))) (4 4) ELSE (5 0)))
 ((4 4) (IF (NIL? (CDR (CDR (CAR *VIEW*)))) (4 5) ELSE (5 0)))
 ((4 5) (IF (CONS? (CDR *VIEW*)) (4 6) ELSE (5 0)))
 ((4 6) (IF (CONS? (CDR (CDR *VIEW*))) (4 7) ELSE (5 0)))
 ((4 7) (IF (NIL? (CDR (CDR (CDR *VIEW*)))) (4 8) ELSE (5 0)))
 ((4 8)
  (LET t (CAR (CDR (CDR *VIEW*))))
  (LET h (CAR (CDR *VIEW*)))
  (LET f (CAR (CDR (CAR *VIEW*))))
  (LET *VIEW* (CONS f (CONS h ())))
  (LET (V 0) (CALL (0 0) *VIEW*))
  (LET *VIEW* (CONS 'cons (CONS (V 0) (CONS t ()))))
  (GOTO (0 0)))
 ((5 0) (IF (CONS? *VIEW*) (5 1) ELSE (6 0)))
 ((5 1) (IF (EQ? (CAR *VIEW*) 'map) (5 2) ELSE (6 0)))
 ((5 2) (IF (CONS? (CDR *VIEW*)) (5 3) ELSE (6 0)))
 ((5 3) (IF (CONS? (CDR (CDR *VIEW*))) (5 4) ELSE (6 0)))
 ((5 4) (IF (NIL? (CDR (CDR (CDR *VIEW*)))) (5 5) ELSE (6 0)))
 ((5 5)
  (LET xs (CAR (CDR (CDR *VIEW*))))
  (LET f (CAR (CDR *VIEW*)))
  (LET *VIEW*
       (CONS 'fold-r
             (CONS (CONS 'cons*f.hd (CONS f ())) (CONS () (CONS xs ())))))
  (GOTO (0 0)))
 ((6 0) (IF (CONS? *VIEW*) (6 1) ELSE (7 0)))
 ((6 1) (IF (EQ? (CAR *VIEW*) 'dup) (6 2) ELSE (7 0)))
 ((6 2) (IF (CONS? (CDR *VIEW*)) (6 3) ELSE (7 0)))
 ((6 3) (IF (NIL? (CDR (CDR *VIEW*))) (6 4) ELSE (7 0)))
 ((6 4) (LET x (CAR (CDR *VIEW*))) (RETURN (CONS x x)))
 ((7 0) (IF (CONS? *VIEW*) (7 1) ELSE (8 0)))
 ((7 1) (IF (EQ? (CAR *VIEW*) 'dbl) (7 2) ELSE (8 0)))
 ((7 2) (IF (CONS? (CDR *VIEW*)) (7 3) ELSE (8 0)))
 ((7 3) (IF (NUM? (CAR (CDR *VIEW*))) (7 4) ELSE (8 0)))
 ((7 4) (IF (NIL? (CDR (CDR *VIEW*))) (7 5) ELSE (8 0)))
 ((7 5) (LET n (CAR (CDR *VIEW*))) (RETURN (+ n n)))
 ((8 0) (IF (CONS? *VIEW*) (8 1) ELSE (9 0)))
 ((8 1) (IF (EQ? (CAR *VIEW*) 'rev) (8 2) ELSE (9 0)))
 ((8 2) (IF (CONS? (CDR *VIEW*)) (8 3) ELSE (9 0)))
 ((8 3) (IF (NIL? (CDR (CDR *VIEW*))) (8 4) ELSE (9 0)))
 ((8 4)
  (LET xs (CAR (CDR *VIEW*)))
  (LET *VIEW* (CONS 'rev (CONS xs (CONS () ()))))
  (GOTO (0 0)))
 ((9 0) (IF (CONS? *VIEW*) (9 1) ELSE (10 0)))
 ((9 1) (IF (EQ? (CAR *VIEW*) 'rev) (9 2) ELSE (10 0)))
 ((9 2) (IF (CONS? (CDR *VIEW*)) (9 3) ELSE (10 0)))
 ((9 3) (IF (NIL? (CAR (CDR *VIEW*))) (9 4) ELSE (10 0)))
 ((9 4) (IF (CONS? (CDR (CDR *VIEW*))) (9 5) ELSE (10 0)))
 ((9 5) (IF (NIL? (CDR (CDR (CDR *VIEW*)))) (9 6) ELSE (10 0)))
 ((9 6) (LET rs (CAR (CDR (CDR *VIEW*)))) (RETURN rs))
 ((10 0) (IF (CONS? *VIEW*) (10 1) ELSE (11 0)))
 ((10 1) (IF (EQ? (CAR *VIEW*) 'rev) (10 2) ELSE (11 0)))
 ((10 2) (IF (CONS? (CDR *VIEW*)) (10 3) ELSE (11 0)))
 ((10 3) (IF (CONS? (CAR (CDR *VIEW*))) (10 4) ELSE (11 0)))
 ((10 4) (IF (CONS? (CDR (CDR *VIEW*))) (10 5) ELSE (11 0)))
 ((10 5) (IF (NIL? (CDR (CDR (CDR *VIEW*)))) (10 6) ELSE (11 0)))
 ((10 6)
  (LET rs (CAR (CDR (CDR *VIEW*))))
  (LET xs (CDR (CAR (CDR *VIEW*))))
  (LET x (CAR (CAR (CDR *VIEW*))))
  (LET *VIEW* (CONS 'rev (CONS xs (CONS (CONS x rs) ()))))
  (GOTO (0 0)))
 ((11 0) (RETURN 'no-match))) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (lookup k dict) ;; assoc-ref is evil
  (match dict
    (() #f)
    (((k* . v*) . dict*) (if (equal? k k*) v* (lookup k dict*)))))

(define (update k v dict)
  (match dict
    (() `((,k . ,v)))
    (((k* . v*) . dict*) (if (equal? k k*)
                             `((,k . ,v) . ,dict*)
                             `((,k* . ,v*) . ,(update k v dict*))))))


(define (block-for pp #;in src) (lookup pp src))

(define (is-leaf? block) (match block ((('IF . _)) #f) (_ #t))) ;;; he_he

;;; first we want to build simple mapping from pp (labels) to list of
;;; all [unique] pps from which one can land on pp -- i.e. pp's ,,runtime
;;; predecessors''. we can (and do) ignore leaf nodes, what matters is
;;; just an analysis of the main decission tree...

(define (add-pred preds pr pp)
  (match preds
    (() `((,pp . (,pr))))
    (((pp* . prs) . preds*) (if (equal? pp* pp)
                                (let* ((prs* (if (member? pr prs)
                                                 prs
                                                 `(,pr . ,prs))))
                                  `((,pp* . ,prs*) . ,preds*))
                                `((,pp* . ,prs) .
                                  ,(add-pred preds* pr pp))))))

(define (predecs-map src) ;; -> alist(pp -> [pp])
  (let loop ((pend src)
             (res (map (lambda ((pp . block)) `(,pp . ())) src)))
    (match pend
      (() res)
      (((pp ('IF test then 'ELSE else)) . pend*)
       (loop pend* (add-pred (add-pred res pp then) pp else)))
      (((pp ('GOTO pp*)) . pend*)
       (loop pend* (add-pred res pp pp*)))
      (((pp . leaf-block) . pend*)
       (loop pend* res)))))

;;; now we can propagate which tests are potential future of each
;;; pp (indirectly: which information is worth keeping from there on)
;;; it's quite similar to live variable analysis, only simpler since
;;; the part we analyze is a tree. we can even identify all leaves
;;; as a single node whose alive tests/information is empty...
;;; (but we don't because later on we'll be pushing information through
;;; leaves too, at least ,,that's the plan'')


(define (tests-map src preds) ;; -> alist(pp -> [test])
  (let* ((leaves (filter-map (lambda ((pp . block)) (and (is-leaf? block) pp))
                             src))
         (preds-of-leaves (append-map (lambda (pp) (lookup pp preds)) leaves))
         (initial-mapping (map (lambda ((pp . block)) `(,pp . ())) src))
         (initial-pend (map (lambda (pp) `(,pp . ())) preds-of-leaves)))
    (let loop ((pend initial-pend)
               (pp2tests initial-mapping)
               (seen '()))
      (match pend
        (() pp2tests)
        (((cur . tests) . pend*)
         (if (or (member? cur leaves)
                 (member? `(,cur . ,tests) seen))
             (loop pend* pp2tests seen)
             (let* ((seen* `((,cur . ,tests) . ,seen))
                    ((('IF test _ 'ELSE _)) (block-for cur src))
                    (old-tests (lookup cur pp2tests))
                    (new-tests (union old-tests tests `(,test)))
                    (pp2tests* (update cur new-tests pp2tests))
                    (new-todo (map (lambda (pp)
                                     `(,pp . ,(lookup cur pp2tests*)))
                                   (lookup cur preds)))
                    (pend** (append new-todo pend*)))
               (loop pend** pp2tests* seen*))))))))

;;; ...which should allow pruning driving by a lot even without our
;;; funky expression-logic.scm (for now).

(define (relevant-info #;from info #;wrt tests)
  (match info
    (() '())
    ((('not t) . info*) (if (member? t tests)
                            `((not ,t) . ,(relevant-info info* tests))
                            (relevant-info info* tests)))
    ((t . info*) (if (member? t tests)
                     `(,t . ,(relevant-info info* tests))
                     (relevant-info info* tests)))))

;; hey kid, rock'n'roll, nobody tells you where to go
(define (drive pp info src0 
               src tmap leaves) ;; -> (pp* src**)
  (cond
   ((lookup `(,pp ,info) src0)`((,pp ,info) ,src0)) ;; already seen!
   ((member? pp leaves) (let* ((pp* pp #;`(,pp ,info)) ;; sic!
                               (block* (block-for pp src))
                               (src1 `(,@src0 (,pp* . ,block*))))
                          `(,pp* ,(if (lookup pp* src0) src0 src1))))
   (else
    (let* (((('IF test tpp 'ELSE fpp)) (block-for pp src))
           (ti (relevant-info #;from (union info `(,test))
                              #;wrt (lookup tpp tmap)))
           (fi (relevant-info #;from (union info `((not ,test)))
                              #;wrt (lookup fpp tmap))))
      (cond ((member? test info)
             (drive tpp ti src0 src tmap leaves))
            ((member? `(not ,test) info)
             (drive fpp fi src0 src tmap leaves))
            (else
             (let* ((pp* `(,pp ,info))
                    ((tpp* src1) (drive tpp ti
                                        src0 src tmap leaves))
                    ((fpp* src2) (drive fpp fi 
                                        src1 src tmap leaves)))
               (cond ((equal? tpp* fpp*)
                      `(,tpp* ,src2)) ;; sure?
                     ((lookup pp* src2)
                      `(,pp* ,src2))
                     (else 
                      (let* ((src3 `(,@src2
                                     (,pp* (IF ,test ,tpp* ELSE ,fpp*)))))
                        `(,pp* ,src3)))))))))))

[define [lookupN k d] [or [lookup k d] 0]] ;;; XD quickfix magic sorry

(define (update-block #;in block #;wrt pp-map)
  (match block
    ((('RETURN e))
     block)
    ((('GOTO pp))
     `((GOTO ,(lookupN pp pp-map))))
    ((('IF t pp-t 'ELSE pp-f))
     `((IF ,t ,(lookup pp-t pp-map) ELSE ,(lookup pp-f pp-map))))
    ((('LET v ('CALL pp e)) . block*)
     `((LET ,v (CALL ,(lookupN pp pp-map) ,e))
       . ,(update-block block* pp-map)))
    ((('LET v e) . block*)
     `((LET ,v ,e) . ,(update-block block* pp-map)))))

    
(define (simplify-pps src)
  (let* ((src (reverse src)) ;; he_he
         (old-pps (map car src))
         (new-pps (iota (length old-pps)))
         (pp-map (map cons old-pps new-pps)))
    (map (lambda ((pp . block))
           (let* ((pp* (lookup pp pp-map))
                  (block* (update-block block pp-map)))
             `(,pp* . ,block*)))
         src)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(let* ((src prg1)
       (p-map (predecs-map src))
       (t-map (tests-map src p-map))
       (leaves-pp (filter-map (lambda ((pp . block)) (and (is-leaf? block) pp))
                              src))
       (start-pp '(0 0))
       (start-info '())
       ((npp new-src) (drive start-pp start-info '()
                             src t-map leaves-pp))
       (new-src* (simplify-pps new-src)))
  (pretty-print new-src*))

;; cf TEST-0.scm for what happened next...

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(e.g. (lookup 'a '((a . 2) (b . 3))) ===> 2)
(e.g. (lookup 'z '((a . 2) (b . 3))) ===> #f)
(e.g. (lookup '(q w e) '(((q w e) . (a s d)) (b . 3))) ===> (a s d))

(e.g. (update 'a 23 '((a . 2) (b . 3))) ===> ((a . 23) (b . 3)))
(e.g. (update '(q w e) '(a s d) '((a . 2) ((q w e) . 23))) ===>
      ((a . 2) ((q w e) . (a s d))))
(e.g. (update '(q w e) '(a s d) '((a . 2) (b . 3))) ===>
      ((a . 2) (b . 3) ((q w e) . (a s d))))

(e.g. (block-for '(0 6) prg1) ===>
      ((IF (NIL? (CDR (CDR (CDR (CDR *VIEW*))))) (0 7) ELSE (1 0))))

(e.g. (block-for '(0 7) prg1) ===>
      ((LET e (CAR (CDR (CDR *VIEW*))))
       (LET op (CAR (CDR *VIEW*)))
       (RETURN e)))

(e.g. (is-leaf? (block-for '(0 6) prg1)) ===> #f)
(e.g. (is-leaf? (block-for '(0 7) prg1)) ===> #t)

(e.g. (add-pred '(((0 3) . ((0 1)))
                  ((1 5) . ((0 2) (1 4)))) '(0 3) #;to '(1 5))
            ===> (((0 3) . ((0 1)))
                  ((1 5) . ((0 3) (0 2) (1 4)))))

(e.g. (add-pred '(((0 3) . ((0 1)))
                  ((1 5) . ((0 2) (1 4)))) '(0 3) #;to '(0 6))
            ===> (((0 3) . ((0 1)))
                  ((1 5) . ((0 2) (1 4)))
                  ((0 6) . ((0 3)))))

(e.g. (add-pred '() '(3 3) #;to '(3 6)) ===> (((3 6) . ((3 3)))))


(e.g. (predecs-map prg1) ===>
      (((0 0)) ;; no predecessors m'kay
       ((0 1) (0 0)) ;; you only get here from (0 0)
       ((0 2) (0 1)) ;; etc etc
       ((0 3) (0 2))
       ((0 4) (0 3))
       ((0 5) (0 4))
       ((0 6) (0 5))
       ((0 7) (0 6))
       ((1 0) (0 6) (0 5) (0 4) (0 3) (0 2) (0 1) (0 0))
       ;;; ^^ fallbacks (to the  next clause) are easily visible, no?
       ((1 1) (1 0))
       ((1 2) (1 1))
       ((1 3) (1 2))
       ((1 4) (1 3))
       ((1 5) (1 4))
       ((1 6) (1 5))
       ((1 7) (1 6))
       ((2 0) (1 6) (1 5) (1 4) (1 3) (1 2) (1 1) (1 0))
       ((2 1) (2 0))
       ((2 2) (2 1))
       ((2 3) (2 2))
       ((2 4) (2 3))
       ((2 5) (2 4))
       ((3 0) (2 4) (2 3) (2 2) (2 1) (2 0))
       ((3 1) (3 0))
       ((3 2) (3 1))
       ((3 3) (3 2))
       ((3 4) (3 3))
       ((3 5) (3 4))
       ((4 0) (3 4) (3 3) (3 2) (3 1) (3 0))
       ((4 1) (4 0))
       ((4 2) (4 1))
       ((4 3) (4 2))
       ((4 4) (4 3))
       ((4 5) (4 4))
       ((4 6) (4 5))
       ((4 7) (4 6))
       ((4 8) (4 7))
       ((5 0) (4 7) (4 6) (4 5) (4 4) (4 3) (4 2) (4 1) (4 0))
       ((5 1) (5 0))
       ((5 2) (5 1))
       ((5 3) (5 2))
       ((5 4) (5 3))
       ((5 5) (5 4))
       ((6 0) (5 4) (5 3) (5 2) (5 1) (5 0))
       ((6 1) (6 0))
       ((6 2) (6 1))
       ((6 3) (6 2))
       ((6 4) (6 3))
       ((7 0) (6 3) (6 2) (6 1) (6 0))
       ((7 1) (7 0))
       ((7 2) (7 1))
       ((7 3) (7 2))
       ((7 4) (7 3))
       ((7 5) (7 4))
       ((8 0) (7 4) (7 3) (7 2) (7 1) (7 0))
       ((8 1) (8 0))
       ((8 2) (8 1))
       ((8 3) (8 2))
       ((8 4) (8 3))
       ((9 0) (8 3) (8 2) (8 1) (8 0))
       ((9 1) (9 0))
       ((9 2) (9 1))
       ((9 3) (9 2))
       ((9 4) (9 3))
       ((9 5) (9 4))
       ((9 6) (9 5))
       ((10 0) (9 5) (9 4) (9 3) (9 2) (9 1) (9 0))
       ((10 1) (10 0))
       ((10 2) (10 1))
       ((10 3) (10 2))
       ((10 4) (10 3))
       ((10 5) (10 4))
       ((10 6) (10 5))
       ((11 0) (10 5) (10 4) (10 3) (10 2) (10 1) (10 0))))

(e.g.
 (tests-map prg1 (predecs-map prg1)) ===>
(((0 0)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dbl)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (EQ? (CAR *VIEW*) 'map)
  (CONS? (CAR *VIEW*))
  (EQ? (CAR (CAR *VIEW*)) 'cons*f.hd)
  (CONS? (CDR (CAR *VIEW*)))
  (NIL? (CDR (CDR (CAR *VIEW*))))
  (EQ? (CAR *VIEW*) 'apd)
  (EQ? (CAR *VIEW*) 'cons)
  (NIL? (CDR (CDR (CDR *VIEW*))))
  (CONS? (CAR (CDR (CDR (CDR *VIEW*)))))
  (CONS? *VIEW*)
  (EQ? (CAR *VIEW*) 'fold-r)
  (CONS? (CDR *VIEW*))
  (CONS? (CDR (CDR *VIEW*)))
  (CONS? (CDR (CDR (CDR *VIEW*))))
  (NIL? (CAR (CDR (CDR (CDR *VIEW*)))))
  (NIL? (CDR (CDR (CDR (CDR *VIEW*))))))
 ((0 1)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (EQ? (CAR *VIEW*) 'dbl)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'map)
  (NIL? (CDR (CDR (CAR *VIEW*))))
  (CONS? (CDR (CAR *VIEW*)))
  (EQ? (CAR (CAR *VIEW*)) 'cons*f.hd)
  (CONS? (CAR *VIEW*))
  (EQ? (CAR *VIEW*) 'apd)
  (NIL? (CDR (CDR (CDR *VIEW*))))
  (EQ? (CAR *VIEW*) 'cons)
  (CONS? *VIEW*)
  (CONS? (CAR (CDR (CDR (CDR *VIEW*)))))
  (EQ? (CAR *VIEW*) 'fold-r)
  (CONS? (CDR *VIEW*))
  (CONS? (CDR (CDR *VIEW*)))
  (CONS? (CDR (CDR (CDR *VIEW*))))
  (NIL? (CAR (CDR (CDR (CDR *VIEW*)))))
  (NIL? (CDR (CDR (CDR (CDR *VIEW*))))))
 ((0 2)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dbl)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (EQ? (CAR *VIEW*) 'map)
  (CONS? (CAR *VIEW*))
  (EQ? (CAR (CAR *VIEW*)) 'cons*f.hd)
  (CONS? (CDR (CAR *VIEW*)))
  (NIL? (CDR (CDR (CAR *VIEW*))))
  (EQ? (CAR *VIEW*) 'apd)
  (EQ? (CAR *VIEW*) 'cons)
  (NIL? (CDR (CDR (CDR *VIEW*))))
  (CONS? (CAR (CDR (CDR (CDR *VIEW*)))))
  (EQ? (CAR *VIEW*) 'fold-r)
  (CONS? *VIEW*)
  (CONS? (CDR *VIEW*))
  (CONS? (CDR (CDR *VIEW*)))
  (CONS? (CDR (CDR (CDR *VIEW*))))
  (NIL? (CAR (CDR (CDR (CDR *VIEW*)))))
  (NIL? (CDR (CDR (CDR (CDR *VIEW*))))))
 ((0 3)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (EQ? (CAR *VIEW*) 'dbl)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'map)
  (NIL? (CDR (CDR (CAR *VIEW*))))
  (CONS? (CDR (CAR *VIEW*)))
  (EQ? (CAR (CAR *VIEW*)) 'cons*f.hd)
  (CONS? (CAR *VIEW*))
  (EQ? (CAR *VIEW*) 'apd)
  (NIL? (CDR (CDR (CDR *VIEW*))))
  (EQ? (CAR *VIEW*) 'cons)
  (CONS? *VIEW*)
  (EQ? (CAR *VIEW*) 'fold-r)
  (CONS? (CDR *VIEW*))
  (CONS? (CAR (CDR (CDR (CDR *VIEW*)))))
  (CONS? (CDR (CDR *VIEW*)))
  (CONS? (CDR (CDR (CDR *VIEW*))))
  (NIL? (CAR (CDR (CDR (CDR *VIEW*)))))
  (NIL? (CDR (CDR (CDR (CDR *VIEW*))))))
 ((0 4)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dbl)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (EQ? (CAR *VIEW*) 'map)
  (CONS? (CAR *VIEW*))
  (EQ? (CAR (CAR *VIEW*)) 'cons*f.hd)
  (CONS? (CDR (CAR *VIEW*)))
  (NIL? (CDR (CDR (CAR *VIEW*))))
  (EQ? (CAR *VIEW*) 'apd)
  (EQ? (CAR *VIEW*) 'cons)
  (NIL? (CDR (CDR (CDR *VIEW*))))
  (CONS? (CAR (CDR (CDR (CDR *VIEW*)))))
  (CONS? (CDR (CDR *VIEW*)))
  (CONS? (CDR *VIEW*))
  (EQ? (CAR *VIEW*) 'fold-r)
  (CONS? *VIEW*)
  (CONS? (CDR (CDR (CDR *VIEW*))))
  (NIL? (CAR (CDR (CDR (CDR *VIEW*)))))
  (NIL? (CDR (CDR (CDR (CDR *VIEW*))))))
 ((0 5)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (EQ? (CAR *VIEW*) 'dbl)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'map)
  (NIL? (CDR (CDR (CAR *VIEW*))))
  (CONS? (CDR (CAR *VIEW*)))
  (EQ? (CAR (CAR *VIEW*)) 'cons*f.hd)
  (CONS? (CAR *VIEW*))
  (EQ? (CAR *VIEW*) 'apd)
  (NIL? (CDR (CDR (CDR *VIEW*))))
  (EQ? (CAR *VIEW*) 'cons)
  (CONS? *VIEW*)
  (EQ? (CAR *VIEW*) 'fold-r)
  (CONS? (CDR *VIEW*))
  (CONS? (CDR (CDR *VIEW*)))
  (CONS? (CDR (CDR (CDR *VIEW*))))
  (CONS? (CAR (CDR (CDR (CDR *VIEW*)))))
  (NIL? (CAR (CDR (CDR (CDR *VIEW*)))))
  (NIL? (CDR (CDR (CDR (CDR *VIEW*))))))
 ((0 6)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dbl)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (EQ? (CAR *VIEW*) 'map)
  (CONS? (CAR *VIEW*))
  (EQ? (CAR (CAR *VIEW*)) 'cons*f.hd)
  (CONS? (CDR (CAR *VIEW*)))
  (NIL? (CDR (CDR (CAR *VIEW*))))
  (EQ? (CAR *VIEW*) 'apd)
  (EQ? (CAR *VIEW*) 'cons)
  (NIL? (CDR (CDR (CDR *VIEW*))))
  (CONS? (CAR (CDR (CDR (CDR *VIEW*)))))
  (CONS? (CDR (CDR (CDR *VIEW*))))
  (CONS? (CDR (CDR *VIEW*)))
  (CONS? (CDR *VIEW*))
  (EQ? (CAR *VIEW*) 'fold-r)
  (CONS? *VIEW*)
  (NIL? (CDR (CDR (CDR (CDR *VIEW*))))))
 ((0 7))
 ((1 0)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (EQ? (CAR *VIEW*) 'dbl)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'map)
  (NIL? (CDR (CDR (CAR *VIEW*))))
  (CONS? (CDR (CAR *VIEW*)))
  (EQ? (CAR (CAR *VIEW*)) 'cons*f.hd)
  (CONS? (CAR *VIEW*))
  (EQ? (CAR *VIEW*) 'apd)
  (NIL? (CDR (CDR (CDR *VIEW*))))
  (EQ? (CAR *VIEW*) 'cons)
  (CONS? *VIEW*)
  (EQ? (CAR *VIEW*) 'fold-r)
  (CONS? (CDR *VIEW*))
  (CONS? (CDR (CDR *VIEW*)))
  (CONS? (CDR (CDR (CDR *VIEW*))))
  (CONS? (CAR (CDR (CDR (CDR *VIEW*)))))
  (NIL? (CDR (CDR (CDR (CDR *VIEW*))))))
 ((1 1)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dbl)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (EQ? (CAR *VIEW*) 'map)
  (CONS? (CAR *VIEW*))
  (EQ? (CAR (CAR *VIEW*)) 'cons*f.hd)
  (CONS? (CDR (CAR *VIEW*)))
  (NIL? (CDR (CDR (CAR *VIEW*))))
  (EQ? (CAR *VIEW*) 'apd)
  (CONS? *VIEW*)
  (EQ? (CAR *VIEW*) 'cons)
  (NIL? (CDR (CDR (CDR *VIEW*))))
  (EQ? (CAR *VIEW*) 'fold-r)
  (CONS? (CDR *VIEW*))
  (CONS? (CDR (CDR *VIEW*)))
  (CONS? (CDR (CDR (CDR *VIEW*))))
  (CONS? (CAR (CDR (CDR (CDR *VIEW*)))))
  (NIL? (CDR (CDR (CDR (CDR *VIEW*))))))
 ((1 2)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (EQ? (CAR *VIEW*) 'dbl)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'map)
  (NIL? (CDR (CDR (CAR *VIEW*))))
  (CONS? (CDR (CAR *VIEW*)))
  (EQ? (CAR (CAR *VIEW*)) 'cons*f.hd)
  (CONS? (CAR *VIEW*))
  (EQ? (CAR *VIEW*) 'apd)
  (NIL? (CDR (CDR (CDR *VIEW*))))
  (EQ? (CAR *VIEW*) 'cons)
  (CONS? *VIEW*)
  (CONS? (CDR *VIEW*))
  (CONS? (CDR (CDR *VIEW*)))
  (CONS? (CDR (CDR (CDR *VIEW*))))
  (CONS? (CAR (CDR (CDR (CDR *VIEW*)))))
  (NIL? (CDR (CDR (CDR (CDR *VIEW*))))))
 ((1 3)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dbl)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (EQ? (CAR *VIEW*) 'map)
  (CONS? (CAR *VIEW*))
  (EQ? (CAR (CAR *VIEW*)) 'cons*f.hd)
  (CONS? (CDR (CAR *VIEW*)))
  (NIL? (CDR (CDR (CAR *VIEW*))))
  (EQ? (CAR *VIEW*) 'apd)
  (CONS? *VIEW*)
  (EQ? (CAR *VIEW*) 'cons)
  (CONS? (CDR *VIEW*))
  (NIL? (CDR (CDR (CDR *VIEW*))))
  (CONS? (CDR (CDR *VIEW*)))
  (CONS? (CDR (CDR (CDR *VIEW*))))
  (CONS? (CAR (CDR (CDR (CDR *VIEW*)))))
  (NIL? (CDR (CDR (CDR (CDR *VIEW*))))))
 ((1 4)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (EQ? (CAR *VIEW*) 'dbl)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'map)
  (NIL? (CDR (CDR (CAR *VIEW*))))
  (CONS? (CDR (CAR *VIEW*)))
  (EQ? (CAR (CAR *VIEW*)) 'cons*f.hd)
  (CONS? (CAR *VIEW*))
  (EQ? (CAR *VIEW*) 'apd)
  (NIL? (CDR (CDR (CDR *VIEW*))))
  (CONS? (CDR (CDR *VIEW*)))
  (CONS? (CDR *VIEW*))
  (EQ? (CAR *VIEW*) 'cons)
  (CONS? *VIEW*)
  (CONS? (CDR (CDR (CDR *VIEW*))))
  (CONS? (CAR (CDR (CDR (CDR *VIEW*)))))
  (NIL? (CDR (CDR (CDR (CDR *VIEW*))))))
 ((1 5)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dbl)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (EQ? (CAR *VIEW*) 'map)
  (CONS? (CAR *VIEW*))
  (EQ? (CAR (CAR *VIEW*)) 'cons*f.hd)
  (CONS? (CDR (CAR *VIEW*)))
  (NIL? (CDR (CDR (CAR *VIEW*))))
  (EQ? (CAR *VIEW*) 'apd)
  (CONS? *VIEW*)
  (EQ? (CAR *VIEW*) 'cons)
  (CONS? (CDR *VIEW*))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*))))
  (CONS? (CAR (CDR (CDR (CDR *VIEW*)))))
  (NIL? (CDR (CDR (CDR (CDR *VIEW*))))))
 ((1 6)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (EQ? (CAR *VIEW*) 'dbl)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'map)
  (NIL? (CDR (CDR (CAR *VIEW*))))
  (CONS? (CDR (CAR *VIEW*)))
  (EQ? (CAR (CAR *VIEW*)) 'cons*f.hd)
  (CONS? (CAR *VIEW*))
  (EQ? (CAR *VIEW*) 'apd)
  (NIL? (CDR (CDR (CDR *VIEW*))))
  (CONS? (CDR (CDR *VIEW*)))
  (CONS? (CDR *VIEW*))
  (EQ? (CAR *VIEW*) 'cons)
  (CONS? *VIEW*)
  (NIL? (CDR (CDR (CDR (CDR *VIEW*))))))
 ((1 7))
 ((2 0)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dbl)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (EQ? (CAR *VIEW*) 'map)
  (CONS? (CAR *VIEW*))
  (EQ? (CAR (CAR *VIEW*)) 'cons*f.hd)
  (CONS? (CDR (CAR *VIEW*)))
  (NIL? (CDR (CDR (CAR *VIEW*))))
  (EQ? (CAR *VIEW*) 'apd)
  (CONS? *VIEW*)
  (EQ? (CAR *VIEW*) 'cons)
  (CONS? (CDR *VIEW*))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((2 1)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (EQ? (CAR *VIEW*) 'dbl)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'map)
  (NIL? (CDR (CDR (CAR *VIEW*))))
  (CONS? (CDR (CAR *VIEW*)))
  (EQ? (CAR (CAR *VIEW*)) 'cons*f.hd)
  (CONS? (CAR *VIEW*))
  (CONS? *VIEW*)
  (EQ? (CAR *VIEW*) 'apd)
  (EQ? (CAR *VIEW*) 'cons)
  (CONS? (CDR *VIEW*))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((2 2)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dbl)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (EQ? (CAR *VIEW*) 'map)
  (CONS? (CAR *VIEW*))
  (EQ? (CAR (CAR *VIEW*)) 'cons*f.hd)
  (CONS? (CDR (CAR *VIEW*)))
  (NIL? (CDR (CDR (CAR *VIEW*))))
  (EQ? (CAR *VIEW*) 'apd)
  (CONS? *VIEW*)
  (CONS? (CDR *VIEW*))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((2 3)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (EQ? (CAR *VIEW*) 'dbl)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'map)
  (NIL? (CDR (CDR (CAR *VIEW*))))
  (CONS? (CDR (CAR *VIEW*)))
  (EQ? (CAR (CAR *VIEW*)) 'cons*f.hd)
  (CONS? (CAR *VIEW*))
  (CONS? *VIEW*)
  (EQ? (CAR *VIEW*) 'apd)
  (CONS? (CDR *VIEW*))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((2 4)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dbl)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (EQ? (CAR *VIEW*) 'map)
  (CONS? (CAR *VIEW*))
  (EQ? (CAR (CAR *VIEW*)) 'cons*f.hd)
  (CONS? (CDR (CAR *VIEW*)))
  (NIL? (CDR (CDR (CAR *VIEW*))))
  (CONS? (CDR (CDR *VIEW*)))
  (CONS? (CDR *VIEW*))
  (EQ? (CAR *VIEW*) 'apd)
  (CONS? *VIEW*)
  (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((2 5))
 ((3 0)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (EQ? (CAR *VIEW*) 'dbl)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'map)
  (NIL? (CDR (CDR (CAR *VIEW*))))
  (CONS? (CDR (CAR *VIEW*)))
  (EQ? (CAR (CAR *VIEW*)) 'cons*f.hd)
  (CONS? (CAR *VIEW*))
  (CONS? *VIEW*)
  (EQ? (CAR *VIEW*) 'apd)
  (CONS? (CDR *VIEW*))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((3 1)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dbl)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (EQ? (CAR *VIEW*) 'map)
  (CONS? *VIEW*)
  (CONS? (CAR *VIEW*))
  (EQ? (CAR (CAR *VIEW*)) 'cons*f.hd)
  (CONS? (CDR (CAR *VIEW*)))
  (NIL? (CDR (CDR (CAR *VIEW*))))
  (EQ? (CAR *VIEW*) 'apd)
  (CONS? (CDR *VIEW*))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((3 2)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (EQ? (CAR *VIEW*) 'dbl)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'map)
  (NIL? (CDR (CDR (CAR *VIEW*))))
  (CONS? (CDR (CAR *VIEW*)))
  (EQ? (CAR (CAR *VIEW*)) 'cons*f.hd)
  (CONS? (CAR *VIEW*))
  (CONS? *VIEW*)
  (CONS? (CDR *VIEW*))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((3 3)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dbl)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (EQ? (CAR *VIEW*) 'map)
  (CONS? *VIEW*)
  (CONS? (CAR *VIEW*))
  (EQ? (CAR (CAR *VIEW*)) 'cons*f.hd)
  (CONS? (CDR (CAR *VIEW*)))
  (NIL? (CDR (CDR (CAR *VIEW*))))
  (CONS? (CDR *VIEW*))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((3 4)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (EQ? (CAR *VIEW*) 'dbl)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'map)
  (CONS? (CDR (CDR *VIEW*)))
  (CONS? (CDR *VIEW*))
  (NIL? (CDR (CDR (CAR *VIEW*))))
  (CONS? (CDR (CAR *VIEW*)))
  (EQ? (CAR (CAR *VIEW*)) 'cons*f.hd)
  (CONS? (CAR *VIEW*))
  (CONS? *VIEW*)
  (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((3 5))
 ((4 0)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dbl)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (EQ? (CAR *VIEW*) 'map)
  (CONS? *VIEW*)
  (CONS? (CAR *VIEW*))
  (EQ? (CAR (CAR *VIEW*)) 'cons*f.hd)
  (CONS? (CDR (CAR *VIEW*)))
  (NIL? (CDR (CDR (CAR *VIEW*))))
  (CONS? (CDR *VIEW*))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((4 1)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (EQ? (CAR *VIEW*) 'dbl)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'map)
  (CONS? *VIEW*)
  (CONS? (CAR *VIEW*))
  (EQ? (CAR (CAR *VIEW*)) 'cons*f.hd)
  (CONS? (CDR (CAR *VIEW*)))
  (NIL? (CDR (CDR (CAR *VIEW*))))
  (CONS? (CDR *VIEW*))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((4 2)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dbl)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (CONS? *VIEW*)
  (EQ? (CAR *VIEW*) 'map)
  (EQ? (CAR (CAR *VIEW*)) 'cons*f.hd)
  (CONS? (CDR (CAR *VIEW*)))
  (NIL? (CDR (CDR (CAR *VIEW*))))
  (CONS? (CDR *VIEW*))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((4 3)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (EQ? (CAR *VIEW*) 'dbl)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'map)
  (CONS? *VIEW*)
  (CONS? (CDR (CAR *VIEW*)))
  (NIL? (CDR (CDR (CAR *VIEW*))))
  (CONS? (CDR *VIEW*))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((4 4)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dbl)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (CONS? *VIEW*)
  (EQ? (CAR *VIEW*) 'map)
  (NIL? (CDR (CDR (CAR *VIEW*))))
  (CONS? (CDR *VIEW*))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((4 5)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (EQ? (CAR *VIEW*) 'dbl)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'map)
  (CONS? *VIEW*)
  (CONS? (CDR *VIEW*))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((4 6)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dbl)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (CONS? *VIEW*)
  (EQ? (CAR *VIEW*) 'map)
  (CONS? (CDR *VIEW*))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((4 7)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (EQ? (CAR *VIEW*) 'dbl)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (NIL? (CDR (CDR *VIEW*)))
  (CONS? (CDR (CDR *VIEW*)))
  (CONS? (CDR *VIEW*))
  (EQ? (CAR *VIEW*) 'map)
  (CONS? *VIEW*)
  (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((4 8))
 ((5 0)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dbl)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (CONS? *VIEW*)
  (EQ? (CAR *VIEW*) 'map)
  (CONS? (CDR *VIEW*))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((5 1)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (EQ? (CAR *VIEW*) 'dbl)
  (NUM? (CAR (CDR *VIEW*)))
  (CONS? *VIEW*)
  (EQ? (CAR *VIEW*) 'dup)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'map)
  (CONS? (CDR *VIEW*))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((5 2)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dbl)
  (NIL? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dup)
  (CONS? *VIEW*)
  (CONS? (CDR *VIEW*))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((5 3)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (EQ? (CAR *VIEW*) 'dbl)
  (NUM? (CAR (CDR *VIEW*)))
  (CONS? *VIEW*)
  (EQ? (CAR *VIEW*) 'dup)
  (CONS? (CDR *VIEW*))
  (NIL? (CDR (CDR *VIEW*)))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((5 4)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (CONS? (CDR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dbl)
  (NIL? (CDR (CDR *VIEW*)))
  (CONS? (CDR *VIEW*))
  (EQ? (CAR *VIEW*) 'dup)
  (CONS? *VIEW*)
  (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((5 5))
 ((6 0)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*))))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (EQ? (CAR *VIEW*) 'dbl)
  (NUM? (CAR (CDR *VIEW*)))
  (CONS? *VIEW*)
  (EQ? (CAR *VIEW*) 'dup)
  (CONS? (CDR *VIEW*))
  (NIL? (CDR (CDR *VIEW*))))
 ((6 1)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*))))
  (EQ? (CAR *VIEW*) 'rev)
  (NUM? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'dbl)
  (CONS? *VIEW*)
  (EQ? (CAR *VIEW*) 'dup)
  (CONS? (CDR *VIEW*))
  (NIL? (CDR (CDR *VIEW*))))
 ((6 2)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*))))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (CONS? *VIEW*)
  (EQ? (CAR *VIEW*) 'dbl)
  (NUM? (CAR (CDR *VIEW*)))
  (CONS? (CDR *VIEW*))
  (NIL? (CDR (CDR *VIEW*))))
 ((6 3)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*))))
  (EQ? (CAR *VIEW*) 'rev)
  (NUM? (CAR (CDR *VIEW*)))
  (CONS? (CDR *VIEW*))
  (EQ? (CAR *VIEW*) 'dbl)
  (CONS? *VIEW*)
  (NIL? (CDR (CDR *VIEW*))))
 ((6 4))
 ((7 0)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*))))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (CONS? *VIEW*)
  (EQ? (CAR *VIEW*) 'dbl)
  (CONS? (CDR *VIEW*))
  (NUM? (CAR (CDR *VIEW*)))
  (NIL? (CDR (CDR *VIEW*))))
 ((7 1)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*))))
  (CONS? *VIEW*)
  (EQ? (CAR *VIEW*) 'rev)
  (EQ? (CAR *VIEW*) 'dbl)
  (CONS? (CDR *VIEW*))
  (NUM? (CAR (CDR *VIEW*)))
  (NIL? (CDR (CDR *VIEW*))))
 ((7 2)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*))))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (EQ? (CAR *VIEW*) 'rev)
  (CONS? *VIEW*)
  (CONS? (CDR *VIEW*))
  (NUM? (CAR (CDR *VIEW*)))
  (NIL? (CDR (CDR *VIEW*))))
 ((7 3)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*))))
  (CONS? *VIEW*)
  (EQ? (CAR *VIEW*) 'rev)
  (CONS? (CDR *VIEW*))
  (NUM? (CAR (CDR *VIEW*)))
  (NIL? (CDR (CDR *VIEW*))))
 ((7 4)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*))))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (CONS? (CDR *VIEW*))
  (EQ? (CAR *VIEW*) 'rev)
  (CONS? *VIEW*)
  (NIL? (CDR (CDR *VIEW*))))
 ((7 5))
 ((8 0)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*))))
  (CONS? *VIEW*)
  (EQ? (CAR *VIEW*) 'rev)
  (CONS? (CDR *VIEW*))
  (NIL? (CDR (CDR *VIEW*))))
 ((8 1)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*))))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (CONS? *VIEW*)
  (EQ? (CAR *VIEW*) 'rev)
  (CONS? (CDR *VIEW*))
  (NIL? (CDR (CDR *VIEW*))))
 ((8 2)
  (CONS? (CAR (CDR *VIEW*)))
  (CONS? *VIEW*)
  (EQ? (CAR *VIEW*) 'rev)
  (NIL? (CAR (CDR *VIEW*)))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*))))
  (CONS? (CDR *VIEW*))
  (NIL? (CDR (CDR *VIEW*))))
 ((8 3)
  (CONS? (CAR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*))))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CAR (CDR *VIEW*)))
  (CONS? (CDR *VIEW*))
  (EQ? (CAR *VIEW*) 'rev)
  (CONS? *VIEW*)
  (NIL? (CDR (CDR *VIEW*))))
 ((8 4))
 ((9 0)
  (CONS? (CAR (CDR *VIEW*)))
  (CONS? *VIEW*)
  (EQ? (CAR *VIEW*) 'rev)
  (CONS? (CDR *VIEW*))
  (NIL? (CAR (CDR *VIEW*)))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((9 1)
  (CONS? (CAR (CDR *VIEW*)))
  (CONS? *VIEW*)
  (EQ? (CAR *VIEW*) 'rev)
  (CONS? (CDR *VIEW*))
  (NIL? (CAR (CDR *VIEW*)))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((9 2)
  (CONS? *VIEW*)
  (EQ? (CAR *VIEW*) 'rev)
  (CONS? (CAR (CDR *VIEW*)))
  (CONS? (CDR *VIEW*))
  (NIL? (CAR (CDR *VIEW*)))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((9 3)
  (CONS? (CAR (CDR *VIEW*)))
  (CONS? (CDR *VIEW*))
  (EQ? (CAR *VIEW*) 'rev)
  (CONS? *VIEW*)
  (NIL? (CAR (CDR *VIEW*)))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((9 4)
  (CONS? *VIEW*)
  (EQ? (CAR *VIEW*) 'rev)
  (CONS? (CDR *VIEW*))
  (CONS? (CAR (CDR *VIEW*)))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((9 5)
  (CONS? (CDR (CDR *VIEW*)))
  (CONS? (CAR (CDR *VIEW*)))
  (CONS? (CDR *VIEW*))
  (EQ? (CAR *VIEW*) 'rev)
  (CONS? *VIEW*)
  (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((9 6))
 ((10 0)
  (CONS? *VIEW*)
  (EQ? (CAR *VIEW*) 'rev)
  (CONS? (CDR *VIEW*))
  (CONS? (CAR (CDR *VIEW*)))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((10 1)
  (EQ? (CAR *VIEW*) 'rev)
  (CONS? (CDR *VIEW*))
  (CONS? (CAR (CDR *VIEW*)))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((10 2)
  (CONS? (CDR *VIEW*))
  (CONS? (CAR (CDR *VIEW*)))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((10 3)
  (CONS? (CAR (CDR *VIEW*)))
  (CONS? (CDR (CDR *VIEW*)))
  (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((10 4) (CONS? (CDR (CDR *VIEW*))) (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((10 5) (NIL? (CDR (CDR (CDR *VIEW*)))))
 ((10 6))
 ((11 0))) )


(e.g. (relevant-info '((CONS? *a*))
                     '((CONS? *a*) (NUM? (CAR *a*))))
      ===> ((CONS? *a*)))

(e.g. (relevant-info '((not (CONS? *a*)))
                     '((CONS? *a*) (NUM? (CAR *a*))))
      ===> ((not (CONS? *a*))))

(e.g. (relevant-info '((CONS? *b*))
                     '((CONS? *a*) (NUM? (CAR *a*))))
      ===> ())


(e.g. (relevant-info '((CONS? *a*)
                       (not (CONS (CDR *a*)))
                       (EQ? (CAR *a*) 'foo))
                     '((CONS? *a*)
                       (CONS (CDR *a*))
                       (CONS (CDR (CDR *a*)))))
      ===> ((CONS? *a*)
            (not (CONS (CDR *a*)))))

